import { useState, useEffect, type FormEvent } from 'react';
import { listSuppliers, listProducts, getBestSupplierPrice } from '../lib/storage';
import type { PurchaseOrder, Supplier, Product, PurchaseOrderItem } from '../lib/types';

interface Props {
  onSave: (po: Omit<PurchaseOrder, 'id' | 'poNumber' | 'createdAt' | 'updatedAt'>) => void;
}

export default function PurchaseOrderForm({ onSave }: Props) {
  const [suppliers, setSuppliers] = useState<Supplier[]>([]);
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedSupplierId, setSelectedSupplierId] = useState('');
  const [items, setItems] = useState<Omit<PurchaseOrderItem, 'total'>[]>([]);
  const [notes, setNotes] = useState('');
  const [expectedDelivery, setExpectedDelivery] = useState('');

  useEffect(() => {
    setSuppliers(listSuppliers());
    setProducts(listProducts());
  }, []);

  const addItem = () => {
    setItems(prev => [...prev, { productId: '', quantity: 1, unitPrice: 0 }]);
  };

  const updateItem = (index: number, field: keyof Omit<PurchaseOrderItem, 'total'>, value: any) => {
    setItems(prev => prev.map((item, i) => {
      if (i === index) {
        const updated = { ...item, [field]: value };
        
        // Auto-fill price when product is selected
        if (field === 'productId' && value) {
          const product = products.find(p => p.id === value);
          const bestPrice = getBestSupplierPrice(value);
          updated.unitPrice = bestPrice?.price || product?.costPrice || 0;
        }
        
        return updated;
      }
      return item;
    }));
  };

  const removeItem = (index: number) => {
    setItems(prev => prev.filter((_, i) => i !== index));
  };

  const calculateTotals = () => {
    const itemsWithTotals = items.map(item => ({
      ...item,
      total: item.quantity * item.unitPrice
    }));
    
    const subtotal = itemsWithTotals.reduce((sum, item) => sum + item.total, 0);
    const taxRate = 0; // Can be made configurable
    const taxAmount = subtotal * taxRate;
    const total = subtotal + taxAmount;
    
    return { itemsWithTotals, subtotal, taxRate, taxAmount, total };
  };

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    
    if (!selectedSupplierId || items.length === 0) {
      alert('Please select a supplier and add at least one item.');
      return;
    }

    const { itemsWithTotals, subtotal, taxRate, taxAmount, total } = calculateTotals();
    
    const po: Omit<PurchaseOrder, 'id' | 'poNumber' | 'createdAt' | 'updatedAt'> = {
      supplierId: selectedSupplierId,
      items: itemsWithTotals,
      subtotal,
      taxRate,
      taxAmount,
      total,
      status: 'draft',
      orderDate: new Date().toISOString(),
      expectedDelivery: expectedDelivery || undefined,
      notes: notes || undefined,
      createdBy: 'user', // In real app, get from current user
      autoGenerated: false
    };
    
    onSave(po);
    
    // Reset form
    setSelectedSupplierId('');
    setItems([]);
    setNotes('');
    setExpectedDelivery('');
  };

  const { subtotal, total } = calculateTotals();
  const selectedSupplier = suppliers.find(s => s.id === selectedSupplierId);

  return (
    <form onSubmit={handleSubmit} className="card space-y-6">
      <h2 className="text-xl font-semibold text-gray-800">Create Purchase Order</h2>
      
      {/* Supplier Selection */}
      <div className="grid md:grid-cols-2 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Supplier *</label>
          <select 
            className="input" 
            value={selectedSupplierId} 
            onChange={(e) => setSelectedSupplierId(e.target.value)}
            required
          >
            <option value="">Select Supplier</option>
            {suppliers.map(supplier => (
              <option key={supplier.id} value={supplier.id}>
                {supplier.name}
              </option>
            ))}
          </select>
          {selectedSupplier && (
            <div className="mt-2 text-sm text-gray-600">
              <div>Contact: {selectedSupplier.contactPerson || 'N/A'}</div>
              <div>Terms: {selectedSupplier.paymentTerms || 'N/A'}</div>
            </div>
          )}
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">Expected Delivery</label>
          <input 
            type="date" 
            className="input" 
            value={expectedDelivery} 
            onChange={(e) => setExpectedDelivery(e.target.value)} 
          />
        </div>
      </div>

      {/* Items Section */}
      <div>
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-medium text-gray-800">Order Items</h3>
          <button type="button" onClick={addItem} className="btn-success text-sm px-4 py-2">
            + Add Item
          </button>
        </div>
        
        {items.map((item, index) => {
          const product = products.find(p => p.id === item.productId);
          const bestPrice = item.productId ? getBestSupplierPrice(item.productId) : null;
          
          return (
            <div key={index} className="grid md:grid-cols-5 gap-3 p-3 bg-gray-50 rounded-lg mb-3">
              <div>
                <select 
                  className="input" 
                  value={item.productId} 
                  onChange={(e) => updateItem(index, 'productId', e.target.value)}
                >
                  <option value="">Select Product</option>
                  {products.map(product => (
                    <option key={product.id} value={product.id}>
                      {product.name} (Stock: {product.stock})
                    </option>
                  ))}
                </select>
                {product && (
                  <div className="text-xs text-gray-500 mt-1">
                    Current stock: {product.stock} | Min: {product.minimumStock}
                  </div>
                )}
              </div>
              
              <div>
                <input 
                  type="number" 
                  className="input" 
                  placeholder="Quantity" 
                  min="1"
                  value={item.quantity} 
                  onChange={(e) => updateItem(index, 'quantity', Number(e.target.value))} 
                />
                {product && item.quantity > 0 && (
                  <div className="text-xs text-gray-500 mt-1">
                    New stock: {product.stock + item.quantity}
                  </div>
                )}
              </div>
              
              <div>
                <input 
                  type="number" 
                  step="0.01"
                  className="input" 
                  placeholder="Unit Price" 
                  value={item.unitPrice} 
                  onChange={(e) => updateItem(index, 'unitPrice', Number(e.target.value))} 
                />
                {bestPrice && (
                  <div className="text-xs text-green-600 mt-1">
                    Best price: R{bestPrice.price.toFixed(2)}
                  </div>
                )}
              </div>
              
              <div className="flex items-center">
                <div className="font-medium text-gray-800">
                  R{(item.quantity * item.unitPrice).toFixed(2)}
                </div>
              </div>
              
              <button 
                type="button" 
                onClick={() => removeItem(index)} 
                className="btn-danger text-sm px-3 py-2"
              >
                Remove
              </button>
            </div>
          );
        })}
        
        {items.length === 0 && (
          <div className="text-center py-8 text-gray-500 bg-gray-50 rounded-lg">
            No items added. Click "Add Item" to start building your purchase order.
          </div>
        )}
      </div>

      {/* Notes */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">Notes</label>
        <textarea 
          className="input h-20" 
          placeholder="Special instructions, delivery requirements, etc." 
          value={notes} 
          onChange={(e) => setNotes(e.target.value)} 
        />
      </div>

      {/* Totals */}
      {items.length > 0 && (
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-medium text-blue-800 mb-3">Order Summary</h4>
          <div className="space-y-2 text-sm">
            <div className="flex justify-between">
              <span>Subtotal:</span>
              <span className="font-medium">R{subtotal.toFixed(2)}</span>
            </div>
            <div className="flex justify-between">
              <span>Tax:</span>
              <span className="font-medium">R0.00</span>
            </div>
            <div className="flex justify-between text-lg font-bold text-blue-800 pt-2 border-t border-blue-200">
              <span>Total:</span>
              <span>R{total.toFixed(2)}</span>
            </div>
          </div>
        </div>
      )}

      {/* AI Suggestions */}
      {selectedSupplierId && (
        <div className="bg-purple-50 border border-purple-200 rounded-lg p-4">
          <h4 className="font-medium text-purple-800 mb-2">ü§ñ AI Suggestions</h4>
          <div className="text-sm text-purple-700 space-y-1">
            <div>‚Ä¢ Consider bulk discounts for quantities over 100 units</div>
            <div>‚Ä¢ This supplier has a 95% on-time delivery rate</div>
            <div>‚Ä¢ Average lead time: 7-10 business days</div>
            {items.some(item => {
              const product = products.find(p => p.id === item.productId);
              return product && product.stock <= product.minimumStock;
            }) && (
              <div className="text-orange-600">‚ö†Ô∏è Some items are at or below minimum stock levels</div>
            )}
          </div>
        </div>
      )}

      {/* Submit Button */}
      <div className="flex justify-end space-x-3 pt-4 border-t">
        <button type="button" className="btn-secondary" onClick={() => {
          setSelectedSupplierId('');
          setItems([]);
          setNotes('');
          setExpectedDelivery('');
        }}>
          Reset Form
        </button>
        <button type="submit" className="btn">
          Create Purchase Order
        </button>
      </div>
    </form>
  );
}